#---------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#---------------------------------------------------------------------------------------------

# Dockerfile used by VS Code Spot extension. (https://marketplace.visualstudio.com/items?itemName=derek-bekoe.Spot)
# This allows Spots to be created directly from PRs.
# The major difference between Dockerfile.spot and Dockerfile is the latter depends on alpine and this one does not.

ARG PYTHON_VERSION="3.6.4"

FROM ubuntu:xenial
#install python
RUN apt-get update \
  && apt-get install -y python3-pip python3-dev \
  && cd /usr/local/bin \
  && ln -s /usr/bin/python3 python \
  && pip3 install --upgrade pip

FROM python:$PYTHON_VERSION

RUN apt-get install -y ca-certificates curl openssl git \
 && apt-get install -y gcc make libffi-dev \
 && update-ca-certificates

ARG JP_VERSION="0.1.3"

RUN curl https://github.com/jmespath/jp/releases/download/${JP_VERSION}/jp-linux-amd64 -o /usr/local/bin/jp \
 && chmod +x /usr/local/bin/jp \
 && pip install --no-cache-dir --upgrade jmespath-terminal

WORKDIR azure-cli
COPY . /azure-cli

# bash gcc make openssl-dev libffi-dev musl-dev - dependencies required for CLI
# openssh - included for ssh-keygen
# ca-certificates

# curl - required for installing jp
# pip wheel - required for CLI packaging
# jmespath-terminal - we include jpterm as a useful tool
# 1. Build packages and store in tmp dir
# 2. Install the cli and the other command modules that weren't included
# 3. Temporary fix - install azure-nspkg to remove import of pkg_resources in azure/__init__.py (to improve performance)
RUN /bin/bash -c 'TMP_PKG_DIR=$(mktemp -d); \
    for d in src/azure-cli src/azure-cli-core src/azure-cli-nspkg src/azure-cli-command_modules-nspkg src/command_modules/azure-cli-*/; \
    do cd $d; echo $d; python setup.py bdist_wheel -d $TMP_PKG_DIR; cd -; \
    done; \
    [ -d privates ] && cp privates/*.whl $TMP_PKG_DIR; \
    all_modules=`find $TMP_PKG_DIR -name "*.whl"`; \
    pip install --no-cache-dir $all_modules; \
    pip install --no-cache-dir --force-reinstall --upgrade azure-nspkg azure-mgmt-nspkg;' \
 && cat /azure-cli/az.completion > ~/.bashrc

WORKDIR /

RUN rm -rf azure-cli

### install brew

WORKDIR /brew

RUN apt-get update \
	&& apt-get install -y --no-install-recommends software-properties-common \
#	&& add-apt-repository -y ppa:git-core/ppa \
	&& apt-get update \
	&& apt-get install -y --no-install-recommends \
#		bzip2 \
#		ca-certificates \
#		curl \
#		file \
#		fonts-dejavu-core \
#		g++ \
#		libz-dev \
		locales \
		make \
#		openssh-client \
#		patch \
#		sudo \
#		uuid-runtime \
#		tzdata \
	&& rm -rf /var/lib/apt/lists/*


RUN apt-get -y update 
RUN apt-get -y install build-essential curl file git
RUN localedef -i en_US -f UTF-8 en_US.UTF-8 \
	&& useradd -m -s /bin/bash linuxbrew \
	&& echo 'linuxbrew ALL=(ALL) NOPASSWD:ALL' >>/etc/sudoers

USER linuxbrew

RUN sh -c "$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)"

USER root
#RUN echo "export PATH=/usr/local/bin:$PATH" >> ~/.bash_profile

RUN echo "a" && test -d ~/.linuxbrew && eval $(~/.linuxbrew/bin/brew shellenv) || true \
 && echo "b" && test -d /home/linuxbrew/.linuxbrew && eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv) || true \
 && echo "c" && test -r ~/.bash_profile && echo "eval \$($(brew --prefix)/bin/brew shellenv)" >>~/.bash_profile || true \
 && echo "d" && echo "eval \$($(brew --prefix)/bin/brew shellenv)" >>~/.profile || true 

ENV PATH=/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin:$PATH \
	SHELL=/bin/bash


# install kubectl
RUN az aks install-cli

### install k9s
RUN brew install derailed/k9s/k9s

### install helm
RUN brew install helm

CMD bash
